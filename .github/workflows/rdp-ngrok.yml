name: RDP via Ngrok

on:
  workflow_dispatch:

jobs:
  rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Enable RDP and Configure Firewall
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"

      - name: Create RDP User with Policy-Compliant Password
        run: |
          # Build a 16 char password manually
          $upper   = [char[]](65..90) | Get-Random -Count 4
          $lower   = [char[]](97..122) | Get-Random -Count 6
          $numbers = [char[]](48..57) | Get-Random -Count 3
          $special = @('!','@','#','$','%','^','&','*') | Get-Random -Count 3
          $passwordArray = $upper + $lower + $numbers + $special
          $password = -join ($passwordArray | Sort-Object {Get-Random})
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          try {
            New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires -PasswordNeverExpires
            Add-LocalGroupMember -Group "Administrators" -Member "RDP"
            Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
            echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          } catch {
            Write-Host "Password failed policy, regenerating..."
            exit 1
          }

      - name: Download & Extract Ngrok
        run: |
          $ngrokPath = "$env:RUNNER_TEMP\ngrok"
          Invoke-WebRequest -Uri https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip -OutFile "$env:RUNNER_TEMP\ngrok.zip"
          Expand-Archive "$env:RUNNER_TEMP\ngrok.zip" -DestinationPath $ngrokPath
          echo "NGROK_EXE=$ngrokPath\ngrok.exe" >> $env:GITHUB_ENV

      - name: Connect Ngrok Tunnel
        run: |
          & "${{ env.NGROK_EXE }}" authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
          Start-Process -FilePath "${{ env.NGROK_EXE }}" -ArgumentList "tcp 3389" -WindowStyle Hidden
          Start-Sleep -Seconds 10
          $tunnels = Invoke-RestMethod -Uri http://127.0.0.1:4040/api/tunnels
          $url = $tunnels.tunnels[0].public_url
          echo "======================================="
          echo "RDP CONNECT INFO"
          echo "Address: $url"
          echo "Username: RDP"
          echo "Password: $env:RDP_PASSWORD"
          echo "======================================="
          echo "::notice title=RDP Credentials::Connect using $url | User: RDP | Pass: $env:RDP_PASSWORD"
          while ($true) { Start-Sleep -Seconds 300 }
